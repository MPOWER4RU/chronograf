package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Permission Specific access
// swagger:model Permission
type Permission string

const (
	PermissionViewAdmin         Permission = "ViewAdmin"
	PermissionViewChronograf    Permission = "ViewChronograf"
	PermissionCreateDatabase    Permission = "CreateDatabase"
	PermissionCreateUserAndRole Permission = "CreateUserAndRole"
	PermissionAddRemoveNode     Permission = "AddRemoveNode"
	PermissionDropDatabase      Permission = "DropDatabase"
	PermissionDropData          Permission = "DropData"
	PermissionReadData          Permission = "ReadData"
	PermissionWriteData         Permission = "WriteData"
	PermissionRebalance         Permission = "Rebalance"
	PermissionManageShard       Permission = "ManageShard"
)

// for schema
var permissionEnum []interface{}

func (m Permission) validatePermissionEnum(path, location string, value Permission) error {
	if permissionEnum == nil {
		var res []Permission
		if err := json.Unmarshal([]byte(`["ViewAdmin","ViewChronograf","CreateDatabase","CreateUserAndRole","AddRemoveNode","DropDatabase","DropData","ReadData","WriteData","Rebalance","ManageShard"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			permissionEnum = append(permissionEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, permissionEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this permission
func (m Permission) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePermissionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
