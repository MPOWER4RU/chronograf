package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Role role
// swagger:model Role
type Role struct {

	// link
	Link *Link `json:"link,omitempty"`

	// name
	// Required: true
	// Max Length: 64
	Name *string `json:"name"`

	// permissions
	// Required: true
	Permissions *Permissions `json:"permissions"`

	// users
	Users *Users `json:"users,omitempty"`
}

// Validate validates this role
func (m *Role) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Role) validateLink(formats strfmt.Registry) error {

	if swag.IsZero(m.Link) { // not required
		return nil
	}

	if m.Link != nil {

		if err := m.Link.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Role) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 64); err != nil {
		return err
	}

	return nil
}

func (m *Role) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("permissions", "body", m.Permissions); err != nil {
		return err
	}

	if m.Permissions != nil {

		if err := m.Permissions.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Role) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if m.Users != nil {

		if err := m.Users.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
