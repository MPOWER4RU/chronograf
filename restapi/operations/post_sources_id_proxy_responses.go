package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/influxdata/chronograf/models"
)

/*PostSourcesIDProxyOK Result of the query from the backend time series data source.

swagger:response postSourcesIdProxyOK
*/
type PostSourcesIDProxyOK struct {

	// In: body
	Payload *models.ProxyResponse `json:"body,omitempty"`
}

// NewPostSourcesIDProxyOK creates PostSourcesIDProxyOK with default headers values
func NewPostSourcesIDProxyOK() *PostSourcesIDProxyOK {
	return &PostSourcesIDProxyOK{}
}

// WithPayload adds the payload to the post sources Id proxy o k response
func (o *PostSourcesIDProxyOK) WithPayload(payload *models.ProxyResponse) *PostSourcesIDProxyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post sources Id proxy o k response
func (o *PostSourcesIDProxyOK) SetPayload(payload *models.ProxyResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSourcesIDProxyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostSourcesIDProxyBadRequest Any query that results in a data source error (syntax error, etc) will cause this response.  The error message will be passed back in the body

swagger:response postSourcesIdProxyBadRequest
*/
type PostSourcesIDProxyBadRequest struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostSourcesIDProxyBadRequest creates PostSourcesIDProxyBadRequest with default headers values
func NewPostSourcesIDProxyBadRequest() *PostSourcesIDProxyBadRequest {
	return &PostSourcesIDProxyBadRequest{}
}

// WithPayload adds the payload to the post sources Id proxy bad request response
func (o *PostSourcesIDProxyBadRequest) WithPayload(payload *models.Error) *PostSourcesIDProxyBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post sources Id proxy bad request response
func (o *PostSourcesIDProxyBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSourcesIDProxyBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostSourcesIDProxyNotFound Data source id does not exist.

swagger:response postSourcesIdProxyNotFound
*/
type PostSourcesIDProxyNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostSourcesIDProxyNotFound creates PostSourcesIDProxyNotFound with default headers values
func NewPostSourcesIDProxyNotFound() *PostSourcesIDProxyNotFound {
	return &PostSourcesIDProxyNotFound{}
}

// WithPayload adds the payload to the post sources Id proxy not found response
func (o *PostSourcesIDProxyNotFound) WithPayload(payload *models.Error) *PostSourcesIDProxyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post sources Id proxy not found response
func (o *PostSourcesIDProxyNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSourcesIDProxyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostSourcesIDProxyRequestTimeout Timeout trying to query data source.

swagger:response postSourcesIdProxyRequestTimeout
*/
type PostSourcesIDProxyRequestTimeout struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostSourcesIDProxyRequestTimeout creates PostSourcesIDProxyRequestTimeout with default headers values
func NewPostSourcesIDProxyRequestTimeout() *PostSourcesIDProxyRequestTimeout {
	return &PostSourcesIDProxyRequestTimeout{}
}

// WithPayload adds the payload to the post sources Id proxy request timeout response
func (o *PostSourcesIDProxyRequestTimeout) WithPayload(payload *models.Error) *PostSourcesIDProxyRequestTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post sources Id proxy request timeout response
func (o *PostSourcesIDProxyRequestTimeout) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSourcesIDProxyRequestTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(408)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostSourcesIDProxyDefault Unexpected internal service error

swagger:response postSourcesIdProxyDefault
*/
type PostSourcesIDProxyDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostSourcesIDProxyDefault creates PostSourcesIDProxyDefault with default headers values
func NewPostSourcesIDProxyDefault(code int) *PostSourcesIDProxyDefault {
	if code <= 0 {
		code = 500
	}

	return &PostSourcesIDProxyDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post sources ID proxy default response
func (o *PostSourcesIDProxyDefault) WithStatusCode(code int) *PostSourcesIDProxyDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post sources ID proxy default response
func (o *PostSourcesIDProxyDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post sources ID proxy default response
func (o *PostSourcesIDProxyDefault) WithPayload(payload *models.Error) *PostSourcesIDProxyDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post sources ID proxy default response
func (o *PostSourcesIDProxyDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSourcesIDProxyDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
