package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/influxdata/chronograf/models"
)

/*GetSourcesIDRolesRoleIDOK Information relating to the role

swagger:response getSourcesIdRolesRoleIdOK
*/
type GetSourcesIDRolesRoleIDOK struct {

	// In: body
	Payload *models.Role `json:"body,omitempty"`
}

// NewGetSourcesIDRolesRoleIDOK creates GetSourcesIDRolesRoleIDOK with default headers values
func NewGetSourcesIDRolesRoleIDOK() *GetSourcesIDRolesRoleIDOK {
	return &GetSourcesIDRolesRoleIDOK{}
}

// WithPayload adds the payload to the get sources Id roles role Id o k response
func (o *GetSourcesIDRolesRoleIDOK) WithPayload(payload *models.Role) *GetSourcesIDRolesRoleIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sources Id roles role Id o k response
func (o *GetSourcesIDRolesRoleIDOK) SetPayload(payload *models.Role) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSourcesIDRolesRoleIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetSourcesIDRolesRoleIDNotFound Unknown source id

swagger:response getSourcesIdRolesRoleIdNotFound
*/
type GetSourcesIDRolesRoleIDNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSourcesIDRolesRoleIDNotFound creates GetSourcesIDRolesRoleIDNotFound with default headers values
func NewGetSourcesIDRolesRoleIDNotFound() *GetSourcesIDRolesRoleIDNotFound {
	return &GetSourcesIDRolesRoleIDNotFound{}
}

// WithPayload adds the payload to the get sources Id roles role Id not found response
func (o *GetSourcesIDRolesRoleIDNotFound) WithPayload(payload *models.Error) *GetSourcesIDRolesRoleIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sources Id roles role Id not found response
func (o *GetSourcesIDRolesRoleIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSourcesIDRolesRoleIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetSourcesIDRolesRoleIDDefault Unexpected internal service error

swagger:response getSourcesIdRolesRoleIdDefault
*/
type GetSourcesIDRolesRoleIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSourcesIDRolesRoleIDDefault creates GetSourcesIDRolesRoleIDDefault with default headers values
func NewGetSourcesIDRolesRoleIDDefault(code int) *GetSourcesIDRolesRoleIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetSourcesIDRolesRoleIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get sources ID roles role ID default response
func (o *GetSourcesIDRolesRoleIDDefault) WithStatusCode(code int) *GetSourcesIDRolesRoleIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get sources ID roles role ID default response
func (o *GetSourcesIDRolesRoleIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get sources ID roles role ID default response
func (o *GetSourcesIDRolesRoleIDDefault) WithPayload(payload *models.Error) *GetSourcesIDRolesRoleIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sources ID roles role ID default response
func (o *GetSourcesIDRolesRoleIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSourcesIDRolesRoleIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
