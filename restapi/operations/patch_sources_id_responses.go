package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/influxdata/chronograf/models"
)

/*PatchSourcesIDNoContent Data source's configuration was changed

swagger:response patchSourcesIdNoContent
*/
type PatchSourcesIDNoContent struct {
}

// NewPatchSourcesIDNoContent creates PatchSourcesIDNoContent with default headers values
func NewPatchSourcesIDNoContent() *PatchSourcesIDNoContent {
	return &PatchSourcesIDNoContent{}
}

// WriteResponse to the client
func (o *PatchSourcesIDNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

/*PatchSourcesIDNotFound Happens when trying to access a non-existent data source.

swagger:response patchSourcesIdNotFound
*/
type PatchSourcesIDNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchSourcesIDNotFound creates PatchSourcesIDNotFound with default headers values
func NewPatchSourcesIDNotFound() *PatchSourcesIDNotFound {
	return &PatchSourcesIDNotFound{}
}

// WithPayload adds the payload to the patch sources Id not found response
func (o *PatchSourcesIDNotFound) WithPayload(payload *models.Error) *PatchSourcesIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch sources Id not found response
func (o *PatchSourcesIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSourcesIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PatchSourcesIDDefault A processing or an unexpected error.

swagger:response patchSourcesIdDefault
*/
type PatchSourcesIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchSourcesIDDefault creates PatchSourcesIDDefault with default headers values
func NewPatchSourcesIDDefault(code int) *PatchSourcesIDDefault {
	if code <= 0 {
		code = 500
	}

	return &PatchSourcesIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the patch sources ID default response
func (o *PatchSourcesIDDefault) WithStatusCode(code int) *PatchSourcesIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the patch sources ID default response
func (o *PatchSourcesIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the patch sources ID default response
func (o *PatchSourcesIDDefault) WithPayload(payload *models.Error) *PatchSourcesIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch sources ID default response
func (o *PatchSourcesIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSourcesIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
