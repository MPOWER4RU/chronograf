package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/influxdata/chronograf/models"
)

/*DeleteSourcesIDKapacitorsKapaIDProxyNoContent Kapacitor returned no content

swagger:response deleteSourcesIdKapacitorsKapaIdProxyNoContent
*/
type DeleteSourcesIDKapacitorsKapaIDProxyNoContent struct {
}

// NewDeleteSourcesIDKapacitorsKapaIDProxyNoContent creates DeleteSourcesIDKapacitorsKapaIDProxyNoContent with default headers values
func NewDeleteSourcesIDKapacitorsKapaIDProxyNoContent() *DeleteSourcesIDKapacitorsKapaIDProxyNoContent {
	return &DeleteSourcesIDKapacitorsKapaIDProxyNoContent{}
}

// WriteResponse to the client
func (o *DeleteSourcesIDKapacitorsKapaIDProxyNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

/*DeleteSourcesIDKapacitorsKapaIDProxyNotFound Data source or Kapacitor ID does not exist.

swagger:response deleteSourcesIdKapacitorsKapaIdProxyNotFound
*/
type DeleteSourcesIDKapacitorsKapaIDProxyNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteSourcesIDKapacitorsKapaIDProxyNotFound creates DeleteSourcesIDKapacitorsKapaIDProxyNotFound with default headers values
func NewDeleteSourcesIDKapacitorsKapaIDProxyNotFound() *DeleteSourcesIDKapacitorsKapaIDProxyNotFound {
	return &DeleteSourcesIDKapacitorsKapaIDProxyNotFound{}
}

// WithPayload adds the payload to the delete sources Id kapacitors kapa Id proxy not found response
func (o *DeleteSourcesIDKapacitorsKapaIDProxyNotFound) WithPayload(payload *models.Error) *DeleteSourcesIDKapacitorsKapaIDProxyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete sources Id kapacitors kapa Id proxy not found response
func (o *DeleteSourcesIDKapacitorsKapaIDProxyNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSourcesIDKapacitorsKapaIDProxyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteSourcesIDKapacitorsKapaIDProxyDefault Response directly from kapacitor

swagger:response deleteSourcesIdKapacitorsKapaIdProxyDefault
*/
type DeleteSourcesIDKapacitorsKapaIDProxyDefault struct {
	_statusCode int

	// In: body
	Payload models.KapacitorProxyResponse `json:"body,omitempty"`
}

// NewDeleteSourcesIDKapacitorsKapaIDProxyDefault creates DeleteSourcesIDKapacitorsKapaIDProxyDefault with default headers values
func NewDeleteSourcesIDKapacitorsKapaIDProxyDefault(code int) *DeleteSourcesIDKapacitorsKapaIDProxyDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteSourcesIDKapacitorsKapaIDProxyDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete sources ID kapacitors kapa ID proxy default response
func (o *DeleteSourcesIDKapacitorsKapaIDProxyDefault) WithStatusCode(code int) *DeleteSourcesIDKapacitorsKapaIDProxyDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete sources ID kapacitors kapa ID proxy default response
func (o *DeleteSourcesIDKapacitorsKapaIDProxyDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete sources ID kapacitors kapa ID proxy default response
func (o *DeleteSourcesIDKapacitorsKapaIDProxyDefault) WithPayload(payload models.KapacitorProxyResponse) *DeleteSourcesIDKapacitorsKapaIDProxyDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete sources ID kapacitors kapa ID proxy default response
func (o *DeleteSourcesIDKapacitorsKapaIDProxyDefault) SetPayload(payload models.KapacitorProxyResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSourcesIDKapacitorsKapaIDProxyDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
