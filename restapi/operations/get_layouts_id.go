package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetLayoutsIDHandlerFunc turns a function with the right signature into a get layouts ID handler
type GetLayoutsIDHandlerFunc func(context.Context, GetLayoutsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLayoutsIDHandlerFunc) Handle(ctx context.Context, params GetLayoutsIDParams) middleware.Responder {
	return fn(ctx, params)
}

// GetLayoutsIDHandler interface for that can handle valid get layouts ID params
type GetLayoutsIDHandler interface {
	Handle(context.Context, GetLayoutsIDParams) middleware.Responder
}

// NewGetLayoutsID creates a new http.Handler for the get layouts ID operation
func NewGetLayoutsID(ctx *middleware.Context, handler GetLayoutsIDHandler) *GetLayoutsID {
	return &GetLayoutsID{Context: ctx, Handler: handler}
}

/*GetLayoutsID swagger:route GET /layouts/{id} getLayoutsId

Specific pre-configured layout containing cells and queries.

layouts will hold information about how to layout the page of graphs.


*/
type GetLayoutsID struct {
	Context *middleware.Context
	Handler GetLayoutsIDHandler
}

func (o *GetLayoutsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetLayoutsIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
