package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUsersUserIDExplorationsExplorationIDHandlerFunc turns a function with the right signature into a get users user ID explorations exploration ID handler
type GetUsersUserIDExplorationsExplorationIDHandlerFunc func(context.Context, GetUsersUserIDExplorationsExplorationIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUsersUserIDExplorationsExplorationIDHandlerFunc) Handle(ctx context.Context, params GetUsersUserIDExplorationsExplorationIDParams) middleware.Responder {
	return fn(ctx, params)
}

// GetUsersUserIDExplorationsExplorationIDHandler interface for that can handle valid get users user ID explorations exploration ID params
type GetUsersUserIDExplorationsExplorationIDHandler interface {
	Handle(context.Context, GetUsersUserIDExplorationsExplorationIDParams) middleware.Responder
}

// NewGetUsersUserIDExplorationsExplorationID creates a new http.Handler for the get users user ID explorations exploration ID operation
func NewGetUsersUserIDExplorationsExplorationID(ctx *middleware.Context, handler GetUsersUserIDExplorationsExplorationIDHandler) *GetUsersUserIDExplorationsExplorationID {
	return &GetUsersUserIDExplorationsExplorationID{Context: ctx, Handler: handler}
}

/*GetUsersUserIDExplorationsExplorationID swagger:route GET /users/{user_id}/explorations/{exploration_id} getUsersUserIdExplorationsExplorationId

Returns the specified data exploration session

A data exploration session specifies query information.


*/
type GetUsersUserIDExplorationsExplorationID struct {
	Context *middleware.Context
	Handler GetUsersUserIDExplorationsExplorationIDHandler
}

func (o *GetUsersUserIDExplorationsExplorationID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUsersUserIDExplorationsExplorationIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
