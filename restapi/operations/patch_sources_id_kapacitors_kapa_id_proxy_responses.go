package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/influxdata/chronograf/models"
)

/*PatchSourcesIDKapacitorsKapaIDProxyNoContent Kapacitor returned no content

swagger:response patchSourcesIdKapacitorsKapaIdProxyNoContent
*/
type PatchSourcesIDKapacitorsKapaIDProxyNoContent struct {
}

// NewPatchSourcesIDKapacitorsKapaIDProxyNoContent creates PatchSourcesIDKapacitorsKapaIDProxyNoContent with default headers values
func NewPatchSourcesIDKapacitorsKapaIDProxyNoContent() *PatchSourcesIDKapacitorsKapaIDProxyNoContent {
	return &PatchSourcesIDKapacitorsKapaIDProxyNoContent{}
}

// WriteResponse to the client
func (o *PatchSourcesIDKapacitorsKapaIDProxyNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

/*PatchSourcesIDKapacitorsKapaIDProxyNotFound Data source or Kapacitor ID does not exist.

swagger:response patchSourcesIdKapacitorsKapaIdProxyNotFound
*/
type PatchSourcesIDKapacitorsKapaIDProxyNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchSourcesIDKapacitorsKapaIDProxyNotFound creates PatchSourcesIDKapacitorsKapaIDProxyNotFound with default headers values
func NewPatchSourcesIDKapacitorsKapaIDProxyNotFound() *PatchSourcesIDKapacitorsKapaIDProxyNotFound {
	return &PatchSourcesIDKapacitorsKapaIDProxyNotFound{}
}

// WithPayload adds the payload to the patch sources Id kapacitors kapa Id proxy not found response
func (o *PatchSourcesIDKapacitorsKapaIDProxyNotFound) WithPayload(payload *models.Error) *PatchSourcesIDKapacitorsKapaIDProxyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch sources Id kapacitors kapa Id proxy not found response
func (o *PatchSourcesIDKapacitorsKapaIDProxyNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSourcesIDKapacitorsKapaIDProxyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PatchSourcesIDKapacitorsKapaIDProxyDefault Response directly from kapacitor

swagger:response patchSourcesIdKapacitorsKapaIdProxyDefault
*/
type PatchSourcesIDKapacitorsKapaIDProxyDefault struct {
	_statusCode int

	// In: body
	Payload models.KapacitorProxyResponse `json:"body,omitempty"`
}

// NewPatchSourcesIDKapacitorsKapaIDProxyDefault creates PatchSourcesIDKapacitorsKapaIDProxyDefault with default headers values
func NewPatchSourcesIDKapacitorsKapaIDProxyDefault(code int) *PatchSourcesIDKapacitorsKapaIDProxyDefault {
	if code <= 0 {
		code = 500
	}

	return &PatchSourcesIDKapacitorsKapaIDProxyDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the patch sources ID kapacitors kapa ID proxy default response
func (o *PatchSourcesIDKapacitorsKapaIDProxyDefault) WithStatusCode(code int) *PatchSourcesIDKapacitorsKapaIDProxyDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the patch sources ID kapacitors kapa ID proxy default response
func (o *PatchSourcesIDKapacitorsKapaIDProxyDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the patch sources ID kapacitors kapa ID proxy default response
func (o *PatchSourcesIDKapacitorsKapaIDProxyDefault) WithPayload(payload models.KapacitorProxyResponse) *PatchSourcesIDKapacitorsKapaIDProxyDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch sources ID kapacitors kapa ID proxy default response
func (o *PatchSourcesIDKapacitorsKapaIDProxyDefault) SetPayload(payload models.KapacitorProxyResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSourcesIDKapacitorsKapaIDProxyDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
