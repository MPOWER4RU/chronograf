package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/influxdata/chronograf/models"
)

/*GetSourcesIDKapacitorsKapaIDOK Kapacitor connection information

swagger:response getSourcesIdKapacitorsKapaIdOK
*/
type GetSourcesIDKapacitorsKapaIDOK struct {

	// In: body
	Payload *models.Kapacitor `json:"body,omitempty"`
}

// NewGetSourcesIDKapacitorsKapaIDOK creates GetSourcesIDKapacitorsKapaIDOK with default headers values
func NewGetSourcesIDKapacitorsKapaIDOK() *GetSourcesIDKapacitorsKapaIDOK {
	return &GetSourcesIDKapacitorsKapaIDOK{}
}

// WithPayload adds the payload to the get sources Id kapacitors kapa Id o k response
func (o *GetSourcesIDKapacitorsKapaIDOK) WithPayload(payload *models.Kapacitor) *GetSourcesIDKapacitorsKapaIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sources Id kapacitors kapa Id o k response
func (o *GetSourcesIDKapacitorsKapaIDOK) SetPayload(payload *models.Kapacitor) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSourcesIDKapacitorsKapaIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetSourcesIDKapacitorsKapaIDNotFound Unknown data source or kapacitor id

swagger:response getSourcesIdKapacitorsKapaIdNotFound
*/
type GetSourcesIDKapacitorsKapaIDNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSourcesIDKapacitorsKapaIDNotFound creates GetSourcesIDKapacitorsKapaIDNotFound with default headers values
func NewGetSourcesIDKapacitorsKapaIDNotFound() *GetSourcesIDKapacitorsKapaIDNotFound {
	return &GetSourcesIDKapacitorsKapaIDNotFound{}
}

// WithPayload adds the payload to the get sources Id kapacitors kapa Id not found response
func (o *GetSourcesIDKapacitorsKapaIDNotFound) WithPayload(payload *models.Error) *GetSourcesIDKapacitorsKapaIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sources Id kapacitors kapa Id not found response
func (o *GetSourcesIDKapacitorsKapaIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSourcesIDKapacitorsKapaIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetSourcesIDKapacitorsKapaIDDefault Unexpected internal service error

swagger:response getSourcesIdKapacitorsKapaIdDefault
*/
type GetSourcesIDKapacitorsKapaIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSourcesIDKapacitorsKapaIDDefault creates GetSourcesIDKapacitorsKapaIDDefault with default headers values
func NewGetSourcesIDKapacitorsKapaIDDefault(code int) *GetSourcesIDKapacitorsKapaIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetSourcesIDKapacitorsKapaIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get sources ID kapacitors kapa ID default response
func (o *GetSourcesIDKapacitorsKapaIDDefault) WithStatusCode(code int) *GetSourcesIDKapacitorsKapaIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get sources ID kapacitors kapa ID default response
func (o *GetSourcesIDKapacitorsKapaIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get sources ID kapacitors kapa ID default response
func (o *GetSourcesIDKapacitorsKapaIDDefault) WithPayload(payload *models.Error) *GetSourcesIDKapacitorsKapaIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sources ID kapacitors kapa ID default response
func (o *GetSourcesIDKapacitorsKapaIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSourcesIDKapacitorsKapaIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
