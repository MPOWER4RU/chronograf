package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostUsersUserIDExplorationsHandlerFunc turns a function with the right signature into a post users user ID explorations handler
type PostUsersUserIDExplorationsHandlerFunc func(context.Context, PostUsersUserIDExplorationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUsersUserIDExplorationsHandlerFunc) Handle(ctx context.Context, params PostUsersUserIDExplorationsParams) middleware.Responder {
	return fn(ctx, params)
}

// PostUsersUserIDExplorationsHandler interface for that can handle valid post users user ID explorations params
type PostUsersUserIDExplorationsHandler interface {
	Handle(context.Context, PostUsersUserIDExplorationsParams) middleware.Responder
}

// NewPostUsersUserIDExplorations creates a new http.Handler for the post users user ID explorations operation
func NewPostUsersUserIDExplorations(ctx *middleware.Context, handler PostUsersUserIDExplorationsHandler) *PostUsersUserIDExplorations {
	return &PostUsersUserIDExplorations{Context: ctx, Handler: handler}
}

/*PostUsersUserIDExplorations swagger:route POST /users/{user_id}/explorations postUsersUserIdExplorations

Create new named exploration for this user

*/
type PostUsersUserIDExplorations struct {
	Context *middleware.Context
	Handler PostUsersUserIDExplorationsHandler
}

func (o *PostUsersUserIDExplorations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostUsersUserIDExplorationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
