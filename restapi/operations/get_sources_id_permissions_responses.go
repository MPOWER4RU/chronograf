package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/influxdata/chronograf/models"
)

/*GetSourcesIDPermissionsOK An array of permissions

swagger:response getSourcesIdPermissionsOK
*/
type GetSourcesIDPermissionsOK struct {

	// In: body
	Payload models.AllPermissions `json:"body,omitempty"`
}

// NewGetSourcesIDPermissionsOK creates GetSourcesIDPermissionsOK with default headers values
func NewGetSourcesIDPermissionsOK() *GetSourcesIDPermissionsOK {
	return &GetSourcesIDPermissionsOK{}
}

// WithPayload adds the payload to the get sources Id permissions o k response
func (o *GetSourcesIDPermissionsOK) WithPayload(payload models.AllPermissions) *GetSourcesIDPermissionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sources Id permissions o k response
func (o *GetSourcesIDPermissionsOK) SetPayload(payload models.AllPermissions) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSourcesIDPermissionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetSourcesIDPermissionsNotFound Data source id does not exist.

swagger:response getSourcesIdPermissionsNotFound
*/
type GetSourcesIDPermissionsNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSourcesIDPermissionsNotFound creates GetSourcesIDPermissionsNotFound with default headers values
func NewGetSourcesIDPermissionsNotFound() *GetSourcesIDPermissionsNotFound {
	return &GetSourcesIDPermissionsNotFound{}
}

// WithPayload adds the payload to the get sources Id permissions not found response
func (o *GetSourcesIDPermissionsNotFound) WithPayload(payload *models.Error) *GetSourcesIDPermissionsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sources Id permissions not found response
func (o *GetSourcesIDPermissionsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSourcesIDPermissionsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetSourcesIDPermissionsDefault Unexpected internal service error

swagger:response getSourcesIdPermissionsDefault
*/
type GetSourcesIDPermissionsDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSourcesIDPermissionsDefault creates GetSourcesIDPermissionsDefault with default headers values
func NewGetSourcesIDPermissionsDefault(code int) *GetSourcesIDPermissionsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetSourcesIDPermissionsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get sources ID permissions default response
func (o *GetSourcesIDPermissionsDefault) WithStatusCode(code int) *GetSourcesIDPermissionsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get sources ID permissions default response
func (o *GetSourcesIDPermissionsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get sources ID permissions default response
func (o *GetSourcesIDPermissionsDefault) WithPayload(payload *models.Error) *GetSourcesIDPermissionsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sources ID permissions default response
func (o *GetSourcesIDPermissionsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSourcesIDPermissionsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
